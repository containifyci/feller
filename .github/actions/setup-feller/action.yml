name: 'Setup Feller'
description: >-
  Download and setup Feller binary for secret management in GitHub Actions
author: 'containifyci'

branding:
  icon: 'key'
  color: 'blue'

inputs:
  version:
    description: 'Version of Feller to install (default: latest)'
    required: false
    default: 'latest'
  store-as-teller:
    description: 'Store feller binary as teller for teller compatibility (default: true)'
    required: false
    default: 'true'
  command:
    description: >-
      Feller command to run (optional, e.g., "run", "export", "env")
    required: false
  args:
    description: 'Arguments to pass to the feller command'
    required: false
  working-directory:
    description: 'Working directory to run feller from'
    required: false
    default: '.'

outputs:
  feller-path:
    description: 'Path to the installed feller binary'
    value: ${{ steps.install.outputs.feller-path }}
  version-installed:
    description: 'Version of feller that was installed'
    value: ${{ steps.install.outputs.version-installed }}

runs:
  using: 'composite'
  steps:
    - name: Determine platform and architecture
      shell: bash
      id: platform
      run: |
        # Determine local binary name based on store-as-teller setting
        if [[ "${{ inputs.store-as-teller }}" == "true" ]]; then
          local_name="teller"
        else
          local_name="feller"
        fi
        
        # Set platform-specific binary names
        case "${{ runner.os }}-${{ runner.arch }}" in
          "Linux-X64")
            echo "binary-name=feller-linux-amd64" >> $GITHUB_OUTPUT
            echo "local-name=${local_name}" >> $GITHUB_OUTPUT
            ;;
          "Linux-ARM64")
            echo "binary-name=feller-linux-arm64" >> $GITHUB_OUTPUT
            echo "local-name=${local_name}" >> $GITHUB_OUTPUT
            ;;
          "macOS-X64")
            echo "binary-name=feller-darwin-amd64" >> $GITHUB_OUTPUT
            echo "local-name=${local_name}" >> $GITHUB_OUTPUT
            ;;
          "macOS-ARM64")
            echo "binary-name=feller-darwin-arm64" >> $GITHUB_OUTPUT
            echo "local-name=${local_name}" >> $GITHUB_OUTPUT
            ;;
          "Windows-X64")
            echo "binary-name=feller-windows-amd64.exe.exe" >> $GITHUB_OUTPUT
            echo "local-name=${local_name}.exe" >> $GITHUB_OUTPUT
            ;;
          "Windows-ARM64")
            echo "::error::Windows ARM64 is not supported by feller"
            exit 1
            ;;
          *)
            echo "::error::Unsupported platform: ${{ runner.os }}-${{ runner.arch }}"
            exit 1
            ;;
        esac

    - name: Get version
      shell: bash
      id: version
      run: |
        version="${{ inputs.version }}"
        [[ "$version" == "latest" ]] && version=$(gh release view --repo containifyci/feller --json tagName --jq '.tagName')
        [[ -z "$version" ]] && { echo "::error::Failed to get version"; exit 1; }
        echo "version=${version}" >> $GITHUB_OUTPUT
      env:
        GH_TOKEN: ${{ github.token }}

    - name: Cache feller binary
      uses: actions/cache@v4
      id: cache
      with:
        path: ~/.feller-cache
        key: >-
          feller-${{ steps.version.outputs.version }}-${{ steps.platform.outputs.binary-name }}

    - name: Install or restore feller
      shell: bash
      id: install
      run: |
        version="${{ steps.version.outputs.version }}"
        binary_name="${{ steps.platform.outputs.binary-name }}"
        local_name="${{ steps.platform.outputs.local-name }}"
        
        if [[ "${{ steps.cache.outputs.cache-hit }}" != "true" ]]; then
          mkdir -p ~/.feller-cache
          echo "::notice::Downloading feller ${version} for ${{ runner.os }} ${{ runner.arch }}"
          
          if ! gh release download "${version}" --repo containifyci/feller --pattern "${binary_name}" --dir ~/.feller-cache; then
            echo "::error::Failed to download feller binary ${binary_name} from release ${version}"
            exit 1
          fi
          
          [[ "${binary_name}" != "${local_name}" ]] && mv ~/.feller-cache/${binary_name} ~/.feller-cache/${local_name}
          [[ "${{ runner.os }}" != "Windows" ]] && chmod +x ~/.feller-cache/${local_name}
          
          ~/.feller-cache/${local_name} --help > /dev/null 2>&1 || {
            echo "::error::Downloaded feller binary is not functional"
            exit 1
          }
        fi
        
        echo "feller-path=~/.feller-cache/${local_name}" >> $GITHUB_OUTPUT
        echo "version-installed=${version}" >> $GITHUB_OUTPUT
      env:
        GH_TOKEN: ${{ github.token }}

    - name: Add feller to PATH
      shell: bash
      run: |
        # Add the feller cache directory to PATH
        echo "$(eval echo ~/.feller-cache)" >> $GITHUB_PATH

    - name: Verify installation
      shell: bash
      run: |
        command -v ${{ steps.platform.outputs.local-name }} > /dev/null || {
          echo "::error::feller binary not found in PATH after installation"; exit 1
        }
        echo "::notice::Feller installed successfully"

    - name: Run feller command
      shell: bash
      if: inputs.command != ''
      working-directory: ${{ inputs.working-directory }}
      run: |
        cmd="${{ steps.platform.outputs.local-name }} ${{ inputs.command }} ${{ inputs.args }}"
        echo "::notice::Running: ${cmd}"
        eval "${cmd}"
